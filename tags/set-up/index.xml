<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Set Up on Syntactic Sugar</title>
    <link>https://adelehedrick.github.io/tags/set-up/</link>
    <description>Recent content in Set Up on Syntactic Sugar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://adelehedrick.github.io/tags/set-up/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Blasting Off with Scala</title>
      <link>https://adelehedrick.github.io/blog/2016/10/29/blasting-off-scala/</link>
      <pubDate>Sat, 29 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/blog/2016/10/29/blasting-off-scala/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;Make sure you have set up your environment and are able to use &lt;code&gt;scala&lt;/code&gt; and &lt;code&gt;scalac&lt;/code&gt;, if this is unfamiliar please visit &lt;a href=&#34;https://adelehedrick.github.io/blog/2016/10/27/getting-started-scala/&#34;&gt;Getting Started with Scala&lt;/a&gt;
&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;])&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Getting Started with Scala</title>
      <link>https://adelehedrick.github.io/blog/2016/10/27/getting-started-scala/</link>
      <pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/blog/2016/10/27/getting-started-scala/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;This guide will be for setting up your environment in a Linux OS, I&amp;rsquo;m currently using Ubuntu. You will need Java version 1.8&lt;/p&gt;

&lt;p&gt;To check your Java version just open up a terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like Clojure, Scala compiles into JVM, that is why we need Java!&lt;/p&gt;

&lt;h2 id=&#34;get-scala-up-running&#34;&gt;Get Scala Up &amp;amp; Running&lt;/h2&gt;

&lt;p&gt;For this tutorial I used the Scala &lt;a href=&#34;http://www.scala-lang.org/documentation/getting-started.html&#34;&gt;Getting Started&lt;/a&gt; instructions as a resource. If you find my tutorials have too much detail, then work from that resource, otherwise you can continue on with my tutorial.&lt;/p&gt;

&lt;h3 id=&#34;step-1-download-scala&#34;&gt;Step 1. Download Scala&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;wget&lt;/code&gt; to download the tgz from &lt;a href=&#34;http://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.tgz&#34;&gt;http://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.tgz&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget http://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-unzip-and-move&#34;&gt;Step 2. Unzip and Move&lt;/h3&gt;

&lt;p&gt;Unzip the compressed file using &lt;code&gt;tar&lt;/code&gt; then move and rename the folder to &lt;em&gt;scala&lt;/em&gt; in the &lt;code&gt;/usr/local/share&lt;/code&gt; folder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xvzf scala-2.11.8.tgz
sudo mv scala-2.11.8 /usr/local/share/scala
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-modify-environment-variables&#34;&gt;Step 3. Modify Environment Variables&lt;/h3&gt;

&lt;p&gt;Open up your environment variables file in an editor via &lt;code&gt;sudo gedit /etc/environment&lt;/code&gt; and within the PATH variable assignment, between the double quotes, add &lt;code&gt;:/usr/local/share/scala/bin&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PATH=&amp;quot;&amp;lt;other stuff&amp;gt;:/usr/local/share/scala/bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4-restart-computer&#34;&gt;Step 4. Restart Computer&lt;/h3&gt;

&lt;p&gt;Restart your computer make the changes you made to the &lt;code&gt;environment&lt;/code&gt; file come into effect.&lt;/p&gt;

&lt;h3 id=&#34;step-5-test-scala-repl&#34;&gt;Step 5. Test Scala REPL&lt;/h3&gt;

&lt;p&gt;In your terminal type the command &lt;code&gt;scala&lt;/code&gt; and you should then see a &lt;code&gt;scala&amp;gt;&lt;/code&gt; prompt. At this point you can test a simple &amp;lsquo;hello world&amp;rsquo; by typing &lt;code&gt;println(&amp;quot;Hello World&amp;quot;)&lt;/code&gt; which should then print out the response to the console.&lt;/p&gt;

&lt;p&gt;To exit the REPL use the command &lt;code&gt;:q&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-6-compile-scala&#34;&gt;Step 6. Compile Scala&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;hello.scala&lt;/code&gt; file with the following &lt;em&gt;hello world&lt;/em&gt; contents:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;])&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open up a terminal at the location of your Scala file and use the Scala compiler to compile the class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scalac hello.scala
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you type &lt;code&gt;ls&lt;/code&gt; to list the files in the current folder, you will find &lt;code&gt;HelloWorld.class&lt;/code&gt; and &lt;code&gt;HelloWorld$.class&lt;/code&gt;. To run your new Scala class, execute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scala HelloWorld
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Syntax Highlighting for Clojure in gedit</title>
      <link>https://adelehedrick.github.io/blog/2016/09/24/clojure-gedit-syntax-highlighting/</link>
      <pubDate>Sat, 24 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/blog/2016/09/24/clojure-gedit-syntax-highlighting/</guid>
      <description>

&lt;h2 id=&#34;making-gedit-pretty-again&#34;&gt;Making gedit Pretty Again&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m assuming you are exhausted by now of the lack of syntax highlighting for Clojure in gedit (like I &lt;em&gt;was&lt;/em&gt;) and that you have Git installed (you likely already have it).&lt;/p&gt;

&lt;p&gt;A quick search provided me with enough information to get it working and I will share the stepts that I took with you now.&lt;/p&gt;

&lt;p&gt;Make sure your gedit is closed before you begin.&lt;/p&gt;

&lt;h3 id=&#34;step-1-open-terminal-and-download-repo&#34;&gt;Step 1. Open terminal and download repo&lt;/h3&gt;

&lt;p&gt;Make sure you are starting from the home directory so this whole thing will be a matter of copy/paste&lt;/p&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/mitko/clojure_for_gedit.git
cd clojure_for_gedit/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-move-files-to-where-they-need-to-be&#34;&gt;Step 2. Move files to where they need to be&lt;/h3&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cp clojure.lang /usr/share/gtksourceview-3.0/language-specs/clojure.lang
sudo cp clojure.xml /usr/share/mime/packages/clojure.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-update-mime&#34;&gt;Step 3. Update mime&lt;/h3&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ../usr/share
sudo update-mime-database mime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This last command might take a minute, and you will get no progress output, so just be patient. When you get your cursor back, it is completed (there will be no output).&lt;/p&gt;

&lt;h3 id=&#34;step-4-open-up-a-clojure-file-to-confirm&#34;&gt;Step 4. Open up a Clojure file to confirm&lt;/h3&gt;

&lt;p&gt;You should have pretty syntax highlighting now!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basics of Command Line Arguments in Clojure</title>
      <link>https://adelehedrick.github.io/blog/2016/09/22/command-line-arguments-clojure/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/blog/2016/09/22/command-line-arguments-clojure/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;This post is a continuation of the &lt;a href=&#34;https://adelehedrick.github.io/blog/2016/09/22/clojure-classes/&#34;&gt;classes post&lt;/a&gt;. So if it you&amp;rsquo;re confused head on over there!&lt;/p&gt;

&lt;h3 id=&#34;step-1-open-and-edit-hello-clj&#34;&gt;Step 1. Open and edit hello.clj&lt;/h3&gt;

&lt;p&gt;In the project we made previously, open up the &amp;lsquo;hello.clj&amp;rsquo; by entering &lt;code&gt;gedit hello.clj&lt;/code&gt; in terminal.&lt;/p&gt;

&lt;p&gt;We are now going to put a symbol in the parameter area of the main method declaration.&lt;/p&gt;

&lt;p&gt;We are also going to change the output to include the name entered rather than &amp;ldquo;World&amp;rdquo;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;ns &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;hello&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;:gen-class&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;-main&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;println &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;str &lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;name &lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and close the file.&lt;/p&gt;

&lt;h3 id=&#34;step-2-open-a-repl-and-compile&#34;&gt;Step 2. Open a REPL and compile&lt;/h3&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rlwrap java -cp ~/clojure-1.8.0.jar:. clojure.main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In REPL:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;compile&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;hello&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success! Now you can exit the REPL with &lt;code&gt;CTRL + C&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-3-execute-the-class-file&#34;&gt;Step 3. Execute the class file&lt;/h3&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp ~/clojure-1.8.0.jar:./classes hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Exception in thread &amp;quot;main&amp;quot; clojure.lang.ArityException: Wrong number of args (0) passed to: hello/-main
	at clojure.lang.AFn.throwArity(AFn.java:429)
	at clojure.lang.AFn.invoke(AFn.java:28)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at hello.main(Unknown Source)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whoops! Forgot the actual command line arguments! Let&amp;rsquo;s give a shout out to our very own varsity member! #Power10!&lt;/p&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp ~/clojure-1.8.0.jar:./classes hello Christien
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hello Christien!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success! I am so full of campus pride right now!&lt;/p&gt;

&lt;h3 id=&#34;step-4-more-arguments&#34;&gt;Step 4. More arguments&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s open up the &amp;lsquo;hello.clj&amp;rsquo; file once again and change the arguments to two arguments; first and last.&lt;/p&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gedit hello.clj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In hello.clj:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;ns &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;hello&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;:gen-class&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;-main&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;first &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;last&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;println &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;str &lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;last &lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;first &lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Save and close the file.&lt;/p&gt;

&lt;h3 id=&#34;step-5-recompile&#34;&gt;Step 5. Recompile&lt;/h3&gt;

&lt;p&gt;You should have the line to open up the REPL still in your history, so press the up arrow till you find:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rlwrap java -cp ~/clojure-1.8.0.jar:. clojure.main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In REPL:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;compile&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;hello&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-6-say-hello-to-our-professor&#34;&gt;Step 6. Say &amp;lsquo;hello&amp;rsquo; to our professor&lt;/h3&gt;

&lt;p&gt;Again you should be able to press the up arrow till you find the write command, but don&amp;rsquo;t forget to change the command line arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp ~/clojure-1.8.0.jar:./classes hello Ken Pu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hello Pu, Ken!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-7-way-more-arguments-to-be-less-rude-ironic&#34;&gt;Step 7. Way more arguments to be less rude (ironic?)&lt;/h3&gt;

&lt;p&gt;Open up your &amp;lsquo;hello.clj&amp;rsquo; again and this time we are going to get fancy.&lt;/p&gt;

&lt;p&gt;In hello.clj:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;ns &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;hello&lt;/span&gt;
	&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;clojure.string&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;:only&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)])&lt;/span&gt;
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;:gen-class&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;-main&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;first last &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;prefix&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;println &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;str &lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;prefix&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;. &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;first &lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;last &lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;! &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;join &lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now I require that three arguments are provided; first, last and prefix. If there are any other arguments passed, the &lt;code&gt;&amp;amp;&lt;/code&gt; is going to put the &lt;em&gt;rest&lt;/em&gt; of them into the symbol &lt;code&gt;msg&lt;/code&gt; as a list.&lt;/p&gt;

&lt;p&gt;Since I want to actually output the rest of the arguments as a sentence, we need to take the list of words in &lt;code&gt;msg&lt;/code&gt; and concatenate them together, in order, and separated by spaces. To use the join function, we will need to use the &lt;code&gt;clojure.string&lt;/code&gt; library and &lt;em&gt;only&lt;/em&gt; pull out the &lt;code&gt;join&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Save and close the file.&lt;/p&gt;

&lt;h3 id=&#34;step-8-recompile&#34;&gt;Step 8. Recompile&lt;/h3&gt;

&lt;p&gt;You should have the line to open up the REPL still in your history, so press the up arrow till you find:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rlwrap java -cp ~/clojure-1.8.0.jar:. clojure.main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In REPL:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;compile&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;hello&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sounds repetative, because it is. Thank you copy-paste!&lt;/p&gt;

&lt;h3 id=&#34;step-9-give-a-good-greeting-to-our-professor&#34;&gt;Step 9. Give a good greeting to our professor&lt;/h3&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp ~/clojure-1.8.0.jar:./classes hello Ken Pu Dr Seen anything interesting on Hacker News lately?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hello Dr. Ken Pu! Seen anything interesting on Hacker News lately?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You all should be argumenting pros now!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making Classes From Clojure</title>
      <link>https://adelehedrick.github.io/blog/2016/09/22/clojure-classes/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/blog/2016/09/22/clojure-classes/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m assuming you have the Clojure JAR and know how to run a basic script and a REPL. If you need a reminder head on to &lt;a href=&#34;https://adelehedrick.github.io/blog/2016/09/18/getting-started-clojure/&#34;&gt;Getting Started with Clojure&lt;/a&gt; to get yourself caught up.&lt;/p&gt;

&lt;p&gt;This post is also assuming that you are running Ubuntu or some other Linux flavor.&lt;/p&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project Setup&lt;/h2&gt;

&lt;h3 id=&#34;step-1-move-the-jar-to-your-home-sweet-home&#34;&gt;Step 1. Move the JAR to your home-sweet-home&lt;/h3&gt;

&lt;p&gt;For simplicity sake, I&amp;rsquo;m going to ask that you put your &amp;lsquo;clojure-1.8.0.jar&amp;rsquo; file into your home directory so it is accessible via &amp;lsquo;~/clojure-1.8.0.jar&amp;rsquo;.&lt;/p&gt;

&lt;h3 id=&#34;step-2-create-a-project-folder&#34;&gt;Step 2. Create a project folder&lt;/h3&gt;

&lt;p&gt;Create a project folder somewhere other than your home folder. Perhaps in a place you normally put your projects?&lt;/p&gt;

&lt;h3 id=&#34;step-3-create-a-classes-folder&#34;&gt;Step 3. Create a classes folder&lt;/h3&gt;

&lt;p&gt;At this point you can open up a terminal for your project folder. A cheap way to open a terminal for a window of a directory is to right click on the window, and select &amp;lsquo;Open in Terminal&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m now going to switch to doing most commands in terminal so we all can get cozy in this environment.&lt;/p&gt;

&lt;p&gt;Make the &amp;lsquo;classes&amp;rsquo; folder with &lt;code&gt;mkdir classes&lt;/code&gt; (this name is non-negotiable)&lt;/p&gt;

&lt;p&gt;Confirm the folder by checking what&amp;rsquo;s currently in the directory with &lt;code&gt;ls&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-4-create-a-hello-clj&#34;&gt;Step 4. Create a hello.clj&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m just using gedit for everything since I&amp;rsquo;m lazy, so go ahead and create a &amp;lsquo;hello.clj&amp;rsquo; file by entering &lt;code&gt;gedit hello.clj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the hello.clj file I want you to enter:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;ns &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;hello&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;:gen-class&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;-main&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[]&lt;/span&gt;
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;println &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;str &lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It is important to note that the &lt;a href=&#34;http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/ns&#34;&gt;ns&lt;/a&gt; macro we called in the first line cooresponds to the name of our file. Supplying the &lt;code&gt;:gen-class&lt;/code&gt; keyword will allow this file to compile into a class file of the same name as the namespace and the class is expected to have a main function.&lt;/p&gt;

&lt;p&gt;Speaking of main functions, we declared one! Since we don&amp;rsquo;t want any command line arguments (yet) we can just leave the parameter area blank.&lt;/p&gt;

&lt;p&gt;You may now save and close this file.&lt;/p&gt;

&lt;h3 id=&#34;step-5-start-a-repl&#34;&gt;Step 5. Start a REPL&lt;/h3&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rlwrap java -cp ~/clojure-1.8.0.jar:. clojure.main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the &lt;code&gt;~/&lt;/code&gt; which points to the home folder no matter what directory you are currently in!&lt;/p&gt;

&lt;h3 id=&#34;step-6-compile-in-the-repl&#34;&gt;Step 6. Compile in the REPL&lt;/h3&gt;

&lt;p&gt;In REPL:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;compile&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;hello&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sweet! It spit out the name of our namespace!&lt;/p&gt;

&lt;p&gt;Now enter &lt;code&gt;CTRL + C&lt;/code&gt; to exit the REPL&lt;/p&gt;

&lt;h3 id=&#34;step-7-take-a-peek-at-the-classes&#34;&gt;Step 7. Take a peek at the classes&lt;/h3&gt;

&lt;p&gt;Remember how I said it was important to create that &amp;lsquo;classes&amp;rsquo; folder? Well it is because the Clojure compiler expects it to exist, and places all your class files in there.&lt;/p&gt;

&lt;p&gt;In Terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd classes
ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello.class        hello__init.class                     hello$_main.class
hello$fn__5.class  hello$loading__5569__auto____3.class
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at all those fancy classes! Now return back to your project folder.&lt;/p&gt;

&lt;p&gt;In Terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-8-execute-the-classes&#34;&gt;Step 8. Execute the classes&lt;/h3&gt;

&lt;p&gt;In Terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -cp ~/clojure-1.8.0.jar:./classes hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we had to include the &amp;lsquo;classes&amp;rsquo; folder in the classpath.&lt;/p&gt;

&lt;h3 id=&#34;moving-forward&#34;&gt;Moving forward&lt;/h3&gt;

&lt;p&gt;My &lt;a href=&#34;https://adelehedrick.github.io/blog/2016/09/22/command-line-arguments-clojure/&#34;&gt;next post&lt;/a&gt; will extend this post by adding command line arguments!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Taking Advantage of Bash Aliases for Clojure</title>
      <link>https://adelehedrick.github.io/blog/2016/09/22/clojure-bash-aliases/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/blog/2016/09/22/clojure-bash-aliases/</guid>
      <description>

&lt;h2 id=&#34;too-much-typing&#34;&gt;Too much typing!&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t know about you, but I am exhausted from typing in terminal all the characters I need to start a REPL, or execute Clojure class files.&lt;/p&gt;

&lt;p&gt;A little birdy asked me how Ken has short forms for within terminal, and my response was &amp;ldquo;I don&amp;rsquo;t know, we should Google that!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I think I have some pretty snazzy aliases (that&amp;rsquo;s what Google said their called) now and I am willing to share them with you.&lt;/p&gt;

&lt;h2 id=&#34;home-for-the-clojure-jar&#34;&gt;Home for the Clojure JAR&lt;/h2&gt;

&lt;p&gt;For my aliases to work for you, you need to put your &amp;lsquo;clojure-1.8.0.jar&amp;rsquo; into your home folder.&lt;/p&gt;

&lt;h2 id=&#34;the-magical-bash-aliases&#34;&gt;The magical .bash_aliases&lt;/h2&gt;

&lt;p&gt;In terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gedit ~/.bash_aliases
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will open the file where all your aliases have been stored. Do &lt;em&gt;not&lt;/em&gt; remove anything that is already there (don&amp;rsquo;t be scared if the file is empty), but you can append some more to the bottom.&lt;/p&gt;

&lt;p&gt;Append the following to your .bash_aliases&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias cljrepl=&#39;rlwrap java -cp ~/clojure-1.8.0.jar:. clojure.main &#39;
alias clj=&#39;java -cp ~/clojure-1.8.0.jar:. clojure.main &#39;
alias cljclass=&#39;java -cp ~/clojure-1.8.0.jar:./classes &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save and close.&lt;/p&gt;

&lt;p&gt;The first alias &lt;code&gt;cljrepl&lt;/code&gt; starts a REPL from your current directory with the rlwrap. The second alias &lt;code&gt;clj&lt;/code&gt; is your basic REPL or execution. Finally the third alias &lt;code&gt;cljclass&lt;/code&gt; is to be used from within your project folder one level up from your &amp;lsquo;classes&amp;rsquo; folder.&lt;/p&gt;

&lt;h2 id=&#34;try-it-out&#34;&gt;Try it out&lt;/h2&gt;

&lt;p&gt;If you still have the hello.clj from the &lt;a href=&#34;https://adelehedrick.github.io/blog/2016/09/22/command-line-arguments-clojure/&#34;&gt;command line arguments post&lt;/a&gt;, feel free to try out these tasks from a terminal in the project directory:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start a REPL with &lt;code&gt;cljrepl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the REPL: &lt;code&gt;(compile &#39;hello)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + C&lt;/code&gt; to exit the REPL&lt;/li&gt;
&lt;li&gt;Execute the class with &lt;code&gt;cljclass hello Adele Hedrick Mrs I really appreciate you typing all this out!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Output: &lt;code&gt;Hello Mrs. Adele Hedrick! I really appreciate you typing all this out!&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hope this makes your life easier!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your First Clojure REPL</title>
      <link>https://adelehedrick.github.io/blog/2016/09/19/first-clojure-repl/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/blog/2016/09/19/first-clojure-repl/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;Do you have the Clojure JAR? If not check out the &lt;a href=&#34;https://adelehedrick.github.io/blog/2016/09/18/getting-started-clojure/&#34;&gt;Setting Up Clojure&lt;/a&gt; post&lt;/p&gt;

&lt;h2 id=&#34;your-first-clojure-repl&#34;&gt;Your First Clojure REPL&lt;/h2&gt;

&lt;p&gt;I like to think of the read-eval-print loop (REPL) as the &lt;em&gt;interactive programming&lt;/em&gt; mode of a language.&lt;/p&gt;

&lt;h3 id=&#34;step-1-find-your-clojure-jar&#34;&gt;Step 1. Find your Clojure JAR&lt;/h3&gt;

&lt;p&gt;First open a terminal window and navigate to where your Clojure JAR is located.&lt;/p&gt;

&lt;h3 id=&#34;step-2-run-the-main-method&#34;&gt;Step 2. Run the main method!&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rlwrap java -cp clojure-1.8.0.jar clojure.main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will now see that you have a new prompt that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are now ready to get your Clojure on! When starting a new language, it is good luck to do the typical &amp;ldquo;Hello World&amp;rdquo;. To do this, we will use the &lt;code&gt;println&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Type the following Clojure command to bring yourself lots of good luck with Clojure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(println &amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To leave the REPL, you just need to use &lt;code&gt;CTRL + D&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your First Leiningen REPL</title>
      <link>https://adelehedrick.github.io/blog/2016/09/19/first-lein-repl/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/blog/2016/09/19/first-lein-repl/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;Have you installed Leiningen? It is a requirement of running the lein repl! If you have no idea what I am saying you can head on over to the &lt;a href=&#34;https://adelehedrick.github.io/blog/2016/09/18/setting-up-lein/&#34;&gt;Setting Up Leiningen&lt;/a&gt; post&lt;/p&gt;

&lt;h2 id=&#34;your-first-lein-repl&#34;&gt;Your First lein REPL&lt;/h2&gt;

&lt;p&gt;I like to think of the read-eval-print loop (REPL) as the &lt;em&gt;interactive programming&lt;/em&gt; mode of a language. The first time you create a REPL through lein, it will download any extra files it needs.&lt;/p&gt;

&lt;p&gt;Open up one now in your terminal window with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lein repl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will now see that you have a new prompt that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are now ready to get your Clojure on! When starting a new language, it is good luck to do the typical &amp;ldquo;Hello World&amp;rdquo;. To do this, we will use the &lt;code&gt;println&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Type the following Clojure command to bring yourself lots of good luck with Clojure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(println &amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To leave the REPL, you just need to use &lt;code&gt;CTRL + D&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Clojure</title>
      <link>https://adelehedrick.github.io/blog/2016/09/18/getting-started-clojure/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/blog/2016/09/18/getting-started-clojure/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;This guide will be for setting up your environment in a Linux OS, I&amp;rsquo;m currently using Ubuntu. You will need Java version 1.6 or later, which is recommended by everything that I have read so far.&lt;/p&gt;

&lt;p&gt;To check your Java version just open up a terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you are probably thinking &amp;ldquo;why do we need Java? I thought we are programming in Clojure?&amp;rdquo; To answer your unasked question, the Clojure code you write will be compiled by the Clojure &lt;em&gt;compiler&lt;/em&gt; to create Java Virtual Machine (JVM) bytecode. The Clojure compiler&amp;ndash;that we will get to later on&amp;ndash;is actually an executable JAR file, hence the need for Java.&lt;/p&gt;

&lt;h2 id=&#34;get-clojure-up-running&#34;&gt;Get Clojure Up &amp;amp; Running&lt;/h2&gt;

&lt;h3 id=&#34;step-1-download-clojure-zip&#34;&gt;Step 1. Download Clojure Zip&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s start off by opening up a terminal, and navigating to a location you want the JAR. Once there use the &lt;code&gt;wget&lt;/code&gt; command to download the zip folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget http://repo1.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-unzip&#34;&gt;Step 2. Unzip&lt;/h3&gt;

&lt;p&gt;Unzip the folder to current directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;unzip clojure-1.8.0.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-move-the-jar-into-the-current-directory&#34;&gt;Step 3. Move the JAR into the Current Directory&lt;/h3&gt;

&lt;p&gt;If you enter &lt;code&gt;ls&lt;/code&gt; you will find your new &amp;lsquo;clojure-1.8.0&amp;rsquo; folder, and inside it is the &amp;lsquo;clojure-1.8.0.jar&amp;rsquo; that we want. Let&amp;rsquo;s pull that JAR out of its directory and bring it into the current directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mv clojure-1.8.0/clojure-1.8.0.jar ./
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4-test-with-a-repl&#34;&gt;Step 4. Test with a REPL&lt;/h3&gt;

&lt;p&gt;I go into more detail about the REPL in this &lt;a href=&#34;https://adelehedrick.github.io/blog/2016/09/19/first-clojure-repl/&#34;&gt;post&lt;/a&gt;, but for now just do these short steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter &lt;code&gt;rlwrap java -cp clojure-1.8.0.jar clojure.main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You are now in the Clojure REPL. Try &lt;code&gt;(+ 1 3)&lt;/code&gt; and see if you get 4&lt;/li&gt;
&lt;li&gt;Exit out of the REPL by typing &lt;code&gt;CTRL + D&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note that if rlwrap doesn&amp;rsquo;t work, then do a &lt;code&gt;sudo apt-get install rlwrap&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-4-run-a-clojure-script&#34;&gt;Step 4. Run a Clojure Script&lt;/h3&gt;

&lt;p&gt;REPLs are nice, but but what if you want to code offline and then run it? Let&amp;rsquo;s quickly do that!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Still in the same terminal window create a new Clojure file with &lt;code&gt;gedit hello.clj&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the file enter &lt;code&gt;(println &amp;quot;Hello World!&amp;quot;)&lt;/code&gt; then save and close the file&lt;/li&gt;
&lt;li&gt;Back in your terminal window you are going to run the same command as you did to start the Clojure REPL, but now you are going to provide it with a command line argument of the file name of the script you just wrote: &lt;code&gt;java -cp clojure-1.8.0.jar clojure.main hello.clj&lt;/code&gt;. If you didn&amp;rsquo;t get the expected output of &lt;code&gt;Hello World!&lt;/code&gt; then something went wrong!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-5-break-the-script&#34;&gt;Step 5. Break the Script&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take a quick look at what happens when there is a bug in your Clojure code. Being able to read/write code is very important, but so is being able to read &lt;em&gt;errors&lt;/em&gt;!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up the hello.clj again with &lt;code&gt;gedit hello.clj&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;println&lt;/code&gt; to something else (e.g. &lt;code&gt;printlny&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Now run the script again! &lt;code&gt;java -cp clojure-1.8.0.jar clojure.main hello.clj&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Errors!!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.RuntimeException: Unable to resolve symbol: printlny in this context, compiling:(/home/delio/clojure_play/hello.clj:1:1)
	at clojure.lang.Compiler.analyze(Compiler.java:6688)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3766)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6870)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6001)
	at clojure.lang.Compiler$FnMethod.parse(Compiler.java:5380)
	at clojure.lang.Compiler$FnExpr.parse(Compiler.java:3972)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6866)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.eval(Compiler.java:6924)
	at clojure.lang.Compiler.load(Compiler.java:7379)
	at clojure.lang.Compiler.loadFile(Compiler.java:7317)
	at clojure.main$load_script.invokeStatic(main.clj:275)
	at clojure.main$script_opt.invokeStatic(main.clj:335)
	at clojure.main$script_opt.invoke(main.clj:330)
	at clojure.main$main.invokeStatic(main.clj:421)
	at clojure.main$main.doInvoke(main.clj:384)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at clojure.lang.Var.invoke(Var.java:379)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.Var.applyTo(Var.java:700)
	at clojure.main.main(main.java:37)
Caused by: java.lang.RuntimeException: Unable to resolve symbol: printlny in this context
	at clojure.lang.Util.runtimeException(Util.java:221)
	at clojure.lang.Compiler.resolveIn(Compiler.java:7164)
	at clojure.lang.Compiler.resolve(Compiler.java:7108)
	at clojure.lang.Compiler.analyzeSymbol(Compiler.java:7069)
	at clojure.lang.Compiler.analyze(Compiler.java:6648)
	... 23 more
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an epic output! This stack trace shows you exactly where in the Clojure compiler JAR everything broke down, but most importantly it tells you where in your Clojure script it broke!&lt;/p&gt;

&lt;p&gt;Look at the first line a little more closely:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.RuntimeException: Unable to resolve symbol: printlny in this context, compiling:(/home/delio/clojure_play/hello.clj:1:1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells me a lot! &lt;code&gt;Unable to resolve symbol: printly&lt;/code&gt; tells me that the compiler encountered  something&amp;ndash;in this case &amp;lsquo;printly&amp;rsquo;&amp;ndash;that is completely unknown, and therefore it can&amp;rsquo;t be translated to JVM bytecode! The error then tells me where it encountered the problem by showing the file name, line number and column; &lt;code&gt;(/home/delio/clojure_play/hello.clj:1:1)&lt;/code&gt;. Just to be clear, the first &amp;lsquo;1&amp;rsquo; is the line number, and the second is the column number.&lt;/p&gt;

&lt;h2 id=&#34;moving-forward&#34;&gt;Moving Forward&lt;/h2&gt;

&lt;p&gt;Ready for more? Why don&amp;rsquo;t you head over to the &lt;a href=&#34;https://adelehedrick.github.io/blog/2016/09/22/clojure-classes/&#34;&gt;post on making classes from Clojure files&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up Leiningen</title>
      <link>https://adelehedrick.github.io/blog/2016/09/18/setting-up-lein/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://adelehedrick.github.io/blog/2016/09/18/setting-up-lein/</guid>
      <description>

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before We Begin&lt;/h2&gt;

&lt;p&gt;This guide will be for setting up your environment in a Linux OS, I&amp;rsquo;m currently using Ubuntu. You will need Java version 1.6 or later, which is recommended by everything that I have read so far.&lt;/p&gt;

&lt;p&gt;To check your Java version just open up a terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To quote their &lt;a href=&#34;http://leiningen.org/&#34;&gt;website&lt;/a&gt;; Leiningen is &amp;ldquo;for automating Clojure projects without setting your hair on fire.&amp;rdquo; Leiningen will be helping us get Clojure running as well as manage any dependencies we use. Instructions are on their &lt;a href=&#34;http://leiningen.org/&#34;&gt;website&lt;/a&gt; for installing Leiningen, but they are not detailed enough for my liking, so I have made very thorough instructions.&lt;/p&gt;

&lt;h2 id=&#34;install-leiningen&#34;&gt;Install Leiningen&lt;/h2&gt;

&lt;h3 id=&#34;step-1-open-a-terminal-and-download-the-lein-script&#34;&gt;Step 1. Open a terminal and download the lein script&lt;/h3&gt;

&lt;p&gt;Download the script right from the source listed on the Leiningen &lt;a href=&#34;http://leiningen.org/&#34;&gt;website&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-change-ownership&#34;&gt;Step 2. Change ownership&lt;/h3&gt;

&lt;p&gt;Use chmod to change the &lt;em&gt;ownership&lt;/em&gt; of the lein bash file you just downloaded to allow for anyone to execute the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod a+x lein
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-move-lein&#34;&gt;Step 3. Move lein&lt;/h3&gt;

&lt;p&gt;Now move lein&amp;ndash;with super user privileges&amp;ndash;to your system&amp;rsquo;s executable path.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mv lein /usr/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are prompted to enter your password, do so and carry on.&lt;/p&gt;

&lt;h3 id=&#34;step-4-run-it&#34;&gt;Step 4. Run it&lt;/h3&gt;

&lt;p&gt;Now you will simply run &lt;em&gt;lein&lt;/em&gt; and it will download the self-install package. If you try to run lein without super user privileges, it might yell at you about firewall junk. Be sure to press &lt;code&gt;ENTER&lt;/code&gt; when it asks you to confirm this action.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo lein
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-5-confirm-all-is-well&#34;&gt;Step 5. Confirm all is well&lt;/h3&gt;

&lt;p&gt;Just to make sure everything is good, let&amp;rsquo;s check the version of lein.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lein -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should receive an output similar to mine below (depending on your Java version).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; Leiningen 2.7.0 on Java 1.7.0_80 Java HotSpot(TM) 64-Bit Server VM
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Now that you have Leiningen installed and the Clojure compiler downloaded, why don&amp;rsquo;t you start &lt;a href=&#34;https://adelehedrick.github.io/blog/2016/09/19/first-lein-repl/&#34;&gt;your first Leiningen REPL&lt;/a&gt;?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>